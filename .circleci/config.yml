version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:  
  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<<parameters.Workflow_ID>>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.Workflow_ID>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.Workflow_ID>>"            
  
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: notification_failed_cicd
          template: basic_fail_1

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/CJhzGNYEFHWL71z3PVjMum/migration_<<parameters.Workflow_ID>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  install_nodejs:
    description: Install Node.js
    steps:
      - run:
          name: Install Nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-test]
      - run: 
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
            cd frontend            
            npm install 
            npm update
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install            
            npm audit fix --force

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |          
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - notify_on_failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["66:be:9c:93:c1:34:f6:76:87:93:49:36:54:e3:68:47:16:3f:b5:f6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |

            cd .circleci/ansible
                         
            cd .ssh
            eval `ssh-agent`
            chmod 400 keyp3.pem
            ssh-add keyp3.pem 
            cd ..            

            cat inventory.txt                                        
            ansible-playbook -i inventory.txt -u ubuntu --private-key .ssh/keyp3.pem configure-server.yml
      - notify_on_failure
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo https://kvdb.io/CJhzGNYEFHWL71z3PVjMum/migration_${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/CJhzGNYEFHWL71z3PVjMum/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi      
      - notify_on_failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - notify_on_failure
      - destroy-environment
      - revert-migrations
  
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["14:f0:23:f5:1e:13:58:55:76:bc:7e:f8:30:26:db:2c:4d:35:d1:82"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            
            cd .ssh
            eval `ssh-agent`
            chmod 400 keyp3.pem
            ssh-add keyp3.pem 
            cd ..     

            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml                                               

      - notify_on_failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |            
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_URL | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - notify_on_failure
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - run:
          name: Save old Workflow_ID
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/CJhzGNYEFHWL71z3PVjMum/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/CJhzGNYEFHWL71z3PVjMum/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
  
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: notification_failed_cicd
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend] 
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      